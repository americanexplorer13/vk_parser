import vk_api
import re
import pandas as pd
import os
from multiprocessing import Process
from time import process_time
from time import time, sleep

###################################################
# бан лист TODO: куда нибудь их заебашить чтобы глаз не мозолили
###################################################
df_to_csv = []
df = pd.DataFrame(pd.read_csv("DATASETS/vocab.csv"))
vocab = df['vocab'].values.tolist()

ban_list = [125004421, 29534144, 53845179, 129368275, 113828034, 103815643, 35294456, 44554509, 42923159,
            154989617, 26419239, 45441631, 57846937, 22822305, 12382740, 31836774, 23064236, 29246653,
            460389, 28477986, 30179569, 25554967, 22741624, 115987924, 101209760, 173427262, 84926122,
            71729358, 133180305, 146125149, 45745333, 153164937, 65539551, 67580761, 30022666, 65960786,
            31076033, 33880573, 75908602, 19799369, 21196992, 33376541, 26406986, 166884737, 57536014,
            132677762, 120254617, 162396571, 29544671, 92897199, 36775802, 57876954, 23213239, 45091870,
            141959356, 91050183, 104332051, 52833601, 30316056, 27315475, 67363111, 112510789, 37008294,
            88084325, 31480508, 160306783, 41437811, 56106344, 58526040, 29832607, 24199209, 23308460,
            20865272, 30637940, 31234561, 20744542, 39080597, 12353330, 31866112, 34802894, 152160690,
            66678575, 32258596, 150550417, 169835192, 39566948, 19977823, 43696984, 82887947, 163058008,
            25336774, 75338985, 43901086, 140774221, 147286578, 106935582, 75149440, 22741084, 31101527,
            33338722, 29905631, 115582677, 66697608, 22751485, 92876084, 66932293, 6726778, 163452344,
            82573979, 68016956, 56263398, 99099155, 132937963, 135209264, 49690338, 44781847, 52537634,
            185895299, 127146702, 124636304, 74046904, 149670754, 169626752, 78242229, 62818821, 37743985,
            52387165, 86496021, 64811871, 120685099, 23684028, 129372391, 68895020, 79096458, 70870022,
            69347719, 29369324, 151616545, 102238663, 68016956, 76982440, 133761984, 139939445, 52870744,
            143276111, 66005564, 64151692, 130594854, 2880122, 24472448, 32286993, 39080597, 61034234,
            64000141, 64526004, 69371352, 74026715, 76709587, 79690560, 83143460, 86554234, 90937359,
            92337511, 94532590, 94947512, 99126056, 105494325, 106433582, 107808170, 110073827, 111604199,
            117431540, 120927795, 172550197, 122746566, 122503582, 127065778, 131297509, 132652649, 136798187,
            137170810, 138871416, 141535346, 143177265, 145037861, 149114178, 155057792, 155682063, 155773606,
            51989457, 19396268, 71568189, 101723479, 166863166, 54072336, 149920326, 142163109, 182225861,
            34215577, 147238289, 148881515, 76791337, 144260965, 97336576, 165972901, 145515240, 155622384,
            78019879, 1388, 38664418, 60216948, 139105204, 4325149, 66036248, 15548215, 60337388, 25205856,
            63442801, 132223182, 133814709, 55326998, 137866530, 93077522, 130515799, 128004037, 101373616,
            26030283, 174797165, 182781929, 57921189, 119412403, 39488246, 154906069, 72605916, 33498908,
            44964, 157645793, 51238529, 62178979, 60957092, 184244809, 15375535775219675, 70147321, 144181254,
            139923997, 157193952, 43339080, 106964795, 170580894, 92879038, 163195758, 132799222, 44412943,
            163959120, 79805359, 158007450, 156942049, 141581876, 150755663, 127661835, 184860963, 139567880,
            157697682, 45045130, 61052294, 30487105, 98581330, 25089415, 79145826, 61166138, 112478325, 162189707,
            160905377, 138718885, 122353090, 151728077, 173044628, 159146575, 172222275, 173556111, 147286578,
            143223325, 184435181, 97494559, 143031608, 133572535, 74311008, 96805494, 33934730, 178362158, 24684922,
            170218556, 155312318, 171770917, 153142026, 109491817, 158329271, 171698672, 134879849, 97988796, 164159557,
            158710473, 32578998, 169473268, 178296351, 178024392, 167290370, 94794222, 160697310, 143120001, 43208672,
            182552382, 153354594, 165700974, 182136933, 133572491, 122477418, 19718989, 169651616, 142190029, 174412579,
            111629806, 168638236, 83911318, 156971067, 152869016, 77329489, 146963641, 99414320, 169729973, 29148009,
            85425388, 81485945, 23395094, 9303029, 27075486, 29725798, 41687438, 54269655, 27360139, 106879986,
            148235461, 29725575, 29725517, 61920119, 97751087, 34777837, 73013298, 29700547, 62356431, 98443963,
            24136539, 26493942, 49388814, 40316705, 15755094, 45907911, 130537624, 169385748, 112230375, 49866640, 47692806,
            119126089, 33815405, 18242000, 67092938, 49062323, 51712249, 165368477, 91051776, 55904968, 76829316, 28907323,
            2286932, 18876721, 53193953, 57482877, 109051265, 26724287, 126611192, 50029091, 49737115, 77810837,
            148010585, 49438563, 86152531, 50630084, 150697134, 46523975, 117728599, 29642594, 23951686, 33141827, 4093705,
            49909030, 131301287, 21090314, 28043004, 7955306, 67797649, 24426108, 40218493, 28187082, 41449839, 155293068,
            17711662, 58306490]


###################################################
# функция авторизации в вк
###################################################

def login_in():
    vk_session = vk_api.VkApi('', '', auth_handler=auth_handler)  # ввод токена группы
    vk_session.auth()
    return vk_session.get_api()


###################################################
# хендлер для двухфакторки VK
###################################################

def auth_handler():
    return input("Enter authentication code: "), True


###################################################
# функция замены слов из корпуса датасета по словарю
###################################################

def swap(list_for_swap):
    i = 0
    splitter = list_for_swap.split()
    for split_word in splitter:
        for vocab_word in vocab:
            if split_word.startswith(vocab_word) is not False:
                splitter[i] = vocab_word
                break
        i += 1
    return " ".join(splitter)


###################################################
# функция чистки текста от ненужных символов, ссылок и тому подобного
###################################################

def get_text_group(group):
    for wall_txt in group['items']:
        txt = str(wall_txt['text']).lower() # десериализация ДЖСОНа
        txt = re.sub(r'\n', ' ', txt)
        txt = re.sub(r'ё|Ё', 'е', txt)
        txt = re.sub(r'\[(club|id)(.{1,20000})\|(.{1,20000})\]', ' ', txt)
        txt = re.sub(r'[^ ]{1,20000}\.[^ ]{1,20000}\/?[^ ]{1,20000}', ' ', txt)
        txt = re.sub(r'[^а-яА-Яa-zA-Z]', ' ', txt)
        df_to_csv.append(swap(txt))  # присоединяет распарсенный текст к списку


def get_public(id):
    vk = login_in()  # костыль ибо почему то не хочет передаваться вкв
    try:
        wall_get = vk.wall.get(owner_id=int(-id), count=5)  # пробуем открыть 5 записей
    except vk_api.exceptions.ApiError:  # если не получается по какой-то причине
        print('Public closed, go ahead!')  # дебаг функция, показывает закрыт ли паблик
    else:
        get_text_group(group=wall_get)


if __name__ == '__main__':

    thread_list = []

    halt = 0

    # проверка есть ли другие datasets в папке
    try:
        os.remove(r"DATASETS\TESTING\VK\Vk_dataset.csv")
    except FileNotFoundError:
        print("File not found.")

    vk = login_in()
    user_id = input("Enter user id: ")  # вводим айди юзера для парсинга
    print("PLEASE, WAIT...")

    t1_start = time()
    vk_final = list(set(vk.groups.get(user_id=user_id)['items']) - set(ban_list))

    for pub_id in vk_final:  # он берет все паблики юзера и удаляет те что в бан лист вошли
        i = Process(target=get_public, args=(pub_id,))
        thread_list.append(i)  # вызывает основную функцию

    for i in thread_list:
        i.start()
        sleep(0.7)

    for i in thread_list:
        i.join()

    # собирает датасет Pandas'а в соответствие с dataframe
    pd.DataFrame.from_dict({'txt': df_to_csv}).to_csv("DATASETS/TESTING/VK/vk_dataset.csv", index=False)
    t1_stop = time()
    print("Elapsed time during the whole program in seconds:", t1_stop - t1_start)
